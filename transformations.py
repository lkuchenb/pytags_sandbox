from collections.abc import Iterable, Callable

def _for_each_wrapper(func: Callable, for_each: bool) -> Callable:
    """The function wraps the provided callable in a function that applies it
    element-wise if for_each is set to true. Otherwise the func callable is
    returned as is."""
    if for_each:
        return lambda many : [ func(elem) for elem in many ]
    return func

def split(separator: str, strip: bool = True, for_each: bool = False) -> Callable:
    """Generates a transformation function that splits a string into a list
    based on the defined separator and optionally strips the resulting elements
    from leading and trailing whitespace.
    
    If for_each is set to True, the function will operate element-wise on an
    iterable of strings instead of strings."""
    trans_func = lambda s : [ elem.strip() if strip else elem for elem in s.split(separator) ]
    
    return _for_each_wrapper(trans_func, for_each)
    
def split_to_dict(separator: str, keys : Iterable, strip: bool = True, for_each: bool = False) -> Callable:
    """Generates a transformation function that transforms a string into a
    dictionary. They keys of the dictionary are provided in the keys argument.
    The values of the dictionary are generated by splitting the provided string
    based on the defined separator. Keys and values are paired in their
    respective order. Additional keys or values are silently ignored.
    
    If for_each is set to True, the function will operate element-wise on an
    iterable of strings instead of strings."""
    def trans_func(s):
        splitted = ( elem.strip() if strip else elem for elem in s.split(separator) )
        return dict(zip(keys, splitted))

    return _for_each_wrapper(trans_func, for_each)

